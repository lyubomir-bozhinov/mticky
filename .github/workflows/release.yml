name: Release Binaries & JAR

on:
  push:
    tags:
      - 'v[0-9]+\.[0-9]+\.[0-9]+' # Trigger on version tags like v1.0.0

jobs:
  build_native:
    name: Build Native Executable (${{ matrix.target_os }}-${{ matrix.target_arch }})
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false # Allows other platform builds to continue even if one fails.
      matrix:
        include:
          # Linux AMD64 build configuration
          - runs-on: ubuntu-latest
            target_os: linux
            target_arch: amd64
            ext: ""
            archive_format: tar.gz

          # Windows AMD64 build configuration
          - runs-on: windows-latest
            target_os: windows
            target_arch: amd64
            ext: ".exe"
            archive_format: zip

          # macOS AMD64 (Intel) build configuration
          - runs-on: macos-latest
            target_os: darwin
            target_arch: amd64
            ext: ""
            archive_format: tar.gz

          # macOS ARM64 (Apple Silicon) build configuration
          - runs-on: macos-latest
            target_os: darwin
            target_arch: arm64
            ext: ""
            archive_format: tar.gz

    steps:
      - uses: actions/checkout@v4

      # Cache Maven dependencies for faster builds
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Use the official GraalVM setup action to install GraalVM and native-image
      - name: Setup GraalVM JDK
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '17' 
          distribution: 'graalvm'
          native-image: true

      - name: Build native image with Maven
        run: mvn -B clean package -Pnative # '-Pnative' activates native image compilation
        env:
          FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}

      - name: Prepare native executable artifact
        id: prepare_native_artifact
        shell: bash
        run: |
          VERSION="${GITHUB_REF_NAME}"
          PROJECT_NAME="mticky"
          
          # Debug: List contents of target/ to find the exact executable name
          echo "Listing contents of target/ directory:"
          ls -l target/
          
          # Define the executable source name based on matrix.ext
          EXECUTABLE_SOURCE_NAME="$PROJECT_NAME${{ matrix.ext }}"
          
          # Check if the executable exists in target/
          # If not, try target/mticky-version (common for Spring Boot/Quarkus native builds)
          # Or, if your artifactId is different, adjust PROJECT_NAME accordingly
          if [[ -f "target/$EXECUTABLE_SOURCE_NAME" ]]; then
              EXECUTABLE_PATH="target/$EXECUTABLE_SOURCE_NAME"
          elif [[ -f "target/$PROJECT_NAME-${VERSION#v}" ]]; then # Handle case like 'mticky-1.0.0' for Linux
              EXECUTABLE_PATH="target/$PROJECT_NAME-${VERSION#v}"
          elif [[ -f "target/$PROJECT_NAME-${VERSION#v}${{ matrix.ext }}" ]]; then # Handle case like 'mticky-1.0.0.exe' for Windows
              EXECUTABLE_PATH="target/$PROJECT_NAME-${VERSION#v}${{ matrix.ext }}"
          else
              echo "::error::Native executable not found in target/ as '$EXECUTABLE_SOURCE_NAME' or '$PROJECT_NAME-${VERSION#v}${{ matrix.ext }}' or '$PROJECT_NAME-${VERSION#v}'."
              exit 1
          fi

          echo "Found executable at: $EXECUTABLE_PATH"

          OUTPUT_ARCHIVE_NAME="${PROJECT_NAME}-${VERSION}-${{ matrix.target_os }}-${{ matrix.target_arch }}.${{ matrix.archive_format }}"
          
          mkdir -p native-release-artifacts
          cp "$EXECUTABLE_PATH" "native-release-artifacts/$EXECUTABLE_SOURCE_NAME"
          
          # Use 7z on Windows for zipping as 'zip' command is often not found
          if [[ "${{ matrix.archive_format }}" == "zip" ]]; then
            7z a -tzip "native-release-artifacts/$OUTPUT_ARCHIVE_NAME" "native-release-artifacts/$EXECUTABLE_SOURCE_NAME"
          else
            tar -czf "native-release-artifacts/$OUTPUT_ARCHIVE_NAME" -C native-release-artifacts "$EXECUTABLE_SOURCE_NAME"
          fi
          
          echo "ARCHIVE_PATH=native-release-artifacts/$OUTPUT_ARCHIVE_NAME" >> "$GITHUB_OUTPUT"
          echo "ARTIFACT_NAME=${PROJECT_NAME}-${{ matrix.target_os }}-${{ matrix.target_arch }}-native-executable" >> "$GITHUB_OUTPUT"

      - name: Upload native executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepare_native_artifact.outputs.ARTIFACT_NAME }}
          path: ${{ steps.prepare_native_artifact.outputs.ARCHIVE_PATH }}

  build_jar:
    name: Build Cross-Platform JAR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Temurin provides a standard OpenJDK for JARs
          java-version: '17'
          cache: 'maven'

      - name: Build with Maven
        run: mvn -B clean package # Builds the standard JAR

      - name: Create JAR distribution archives
        id: create_jar_archives
        run: |
          cd target
          VERSION="${GITHUB_REF_NAME}"
          VERSION_NO_V="${VERSION#v}" # Remove 'v' prefix from version
          ARCHIVE_NAME_PREFIX="mticky-${{ github.ref_name }}"
          JAR_NAME="mticky-${VERSION_NO_V}.jar"
          
          mkdir -p ../jar-release-artifacts
          zip -j "../jar-release-artifacts/${ARCHIVE_NAME_PREFIX}.zip" "$JAR_NAME"
          tar -czf "../jar-release-artifacts/${ARCHIVE_NAME_PREFIX}.tar.gz" -C . "$JAR_NAME"

          echo "JAR_ZIP_PATH=../jar-release-artifacts/${ARCHIVE_NAME_PREFIX}.zip" >> "$GITHUB_OUTPUT"
          echo "JAR_TAR_PATH=../jar-release-artifacts/${ARCHIVE_NAME_PREFIX}.tar.gz" >> "$GITHUB_OUTPUT"

      - name: Upload JAR artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mticky-jar-artifacts
          path: jar-release-artifacts/

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build_native, build_jar] # Ensures native and JAR builds complete first
    permissions:
      contents: write # Required to create a release

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-binaries # Downloads all artifacts into subdirectories

      - name: List downloaded files (for debugging purposes)
        run: ls -R all-binaries

      - id: create_release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            all-binaries/**/*.zip
            all-binaries/**/*.tar.gz
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

