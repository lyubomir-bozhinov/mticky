name: Release Binaries & JAR

on:
  push:
    tags:
      - 'v[0-9]+\.[0-9]+\.[0-9]+' # Trigger on version tags like v1.0.0

jobs:
  # Generates the reflect-config.json once to be reused by all native builds
  generate_reflection_config:
    name: Generate Reflection Config
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Setup Java for Jar command
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Generate Lanterna reflection config
        run: |
          LANTERNA_JAR_PATH="$HOME/.m2/repository/com/googlecode/lanterna/lanterna/3.1.2/lanterna-3.1.2.jar"
          CONFIG_DIR="generated-native-config/META-INF/native-image"
          CONFIG_FILE="$CONFIG_DIR/reflect-config.json"

          mkdir -p "$CONFIG_DIR"

          # Generates reflection config for all Lanterna classes, removes trailing comma for valid JSON
          jar tf "$LANTERNA_JAR_PATH" \
            | grep '\.class$' \
            | sed 's/\.class$//' \
            | sed 's/\//./g' \
            | awk '{ print "{\n  \"name\": \"" $1 "\",\n  \"allDeclaredConstructors\": true,\n  \"allDeclaredMethods\": true,\n  \"allDeclaredFields\": true\n}," }' \
            | sed '$s/,//' > "$CONFIG_FILE"

          echo "Generated reflection config at: $CONFIG_FILE"
          cat "$CONFIG_FILE"

      - name: Upload reflection config artifact
        uses: actions/upload-artifact@v4
        with:
          name: lanterna-reflect-config
          path: generated-native-config/

  build_native:
    name: Build Native Executable (${{ matrix.target_os }}-${{ matrix.target_arch }})
    runs-on: ${{ matrix.runs-on }}
    needs: [generate_reflection_config]
    strategy:
      fail-fast: false
      matrix:
        include:
          - runs-on: ubuntu-latest
            target_os: linux
            target_arch: amd64
            ext: ""
            archive_format: tar.gz

          - runs-on: windows-latest
            target_os: windows
            target_arch: amd64
            ext: ".exe"
            archive_format: zip

          - runs-on: macos-latest
            target_os: darwin
            target_arch: amd64
            ext: ""
            archive_format: tar.gz

          - runs-on: macos-latest
            target_os: darwin
            target_arch: arm64
            ext: ""
            archive_format: tar.gz

    steps:
      - uses: actions/checkout@v4

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Setup GraalVM JDK
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '17'
          distribution: 'graalvm'
          native-image: true

      # Download the reflection config generated by 'generate_reflection_config' job
      - name: Download reflection config artifact
        uses: actions/download-artifact@v4
        with:
          name: lanterna-reflect-config
          path: .

      - name: Move reflection config to correct location
        run: |
          # Place the config where Maven/GraalVM expects it
          REQUIRED_CONFIG_DIR="src/main/resources/META-INF/native-image"
          DOWNLOADED_CONFIG_PATH="lanterna-reflect-config/generated-native-config/META-INF/native-image/reflect-config.json"

          mkdir -p "$REQUIRED_CONFIG_DIR"
          mv "$DOWNLOADED_CONFIG_PATH" "$REQUIRED_CONFIG_DIR/reflect-config.json"

          echo "Moved reflect-config.json to $REQUIRED_CONFIG_DIR/"
          ls -l "$REQUIRED_CONFIG_DIR/"

      - name: Build native image with Maven
        run: mvn -B clean package -Pnative
        env:
          FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}

      - name: Prepare native executable artifact
        id: prepare_native_artifact
        shell: bash
        run: |
          VERSION="${GITHUB_REF_NAME}"
          PROJECT_NAME="mticky"

          # Debug: List contents of target/ to find the exact executable name
          echo "Listing contents of target/ directory:"
          ls -l target/

          # Define the executable source name based on matrix.ext
          EXECUTABLE_SOURCE_NAME="$PROJECT_NAME${{ matrix.ext }}"

          # Check if the executable exists in target/
          # If not, try target/mticky-version (common for Spring Boot/Quarkus native builds)
          # Or, if your artifactId is different, adjust PROJECT_NAME accordingly
          if [[ -f "target/$EXECUTABLE_SOURCE_NAME" ]]; then
              EXECUTABLE_PATH="target/$EXECUTABLE_SOURCE_NAME"
          elif [[ -f "target/$PROJECT_NAME-${VERSION#v}" ]]; then
              EXECUTABLE_PATH="target/$PROJECT_NAME-${VERSION#v}"
          elif [[ -f "target/$PROJECT_NAME-${VERSION#v}${{ matrix.ext }}" ]]; then
              EXECUTABLE_PATH="target/$PROJECT_NAME-${VERSION#v}${{ matrix.ext }}"
          else
              echo "::error::Native executable not found in target/ as '$EXECUTABLE_SOURCE_NAME' or '$PROJECT_NAME-${VERSION#v}${{ matrix.ext }}' or '$PROJECT_NAME-${VERSION#v}'."
              exit 1
          fi

          echo "Found executable at: $EXECUTABLE_PATH"

          OUTPUT_ARCHIVE_NAME="${PROJECT_NAME}-${VERSION}-${{ matrix.target_os }}-${{ matrix.target_arch }}.${{ matrix.archive_format }}"

          mkdir -p native-release-artifacts
          cp "$EXECUTABLE_PATH" "native-release-artifacts/$EXECUTABLE_SOURCE_NAME"

          # Use 7z on Windows for zipping as 'zip' command is often not found
          if [[ "${{ matrix.archive_format }}" == "zip" ]]; then
            7z a -tzip "native-release-artifacts/$OUTPUT_ARCHIVE_NAME" "native-release-artifacts/$EXECUTABLE_SOURCE_NAME"
          else
            tar -czf "native-release-artifacts/$OUTPUT_ARCHIVE_NAME" -C native-release-artifacts "$EXECUTABLE_SOURCE_NAME"
          fi

          echo "ARCHIVE_PATH=native-release-artifacts/$OUTPUT_ARCHIVE_NAME" >> "$GITHUB_OUTPUT"
          echo "ARTIFACT_NAME=${PROJECT_NAME}-${{ matrix.target_os }}-${{ matrix.target_arch }}-native-executable" >> "$GITHUB_OUTPUT"

      - name: Upload native executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepare_native_artifact.outputs.ARTIFACT_NAME }}
          path: ${{ steps.prepare_native_artifact.outputs.ARCHIVE_PATH }}

  build_jar:
    name: Build Cross-Platform JAR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Build with Maven
        run: mvn -B clean package

      - name: Create JAR distribution archives
        id: create_jar_archives
        run: |
          cd target
          VERSION="${GITHUB_REF_NAME}"
          VERSION_NO_V="${VERSION#v}"
          ARCHIVE_NAME_PREFIX="mticky-${{ github.ref_name }}"
          JAR_NAME="mticky-${VERSION_NO_V}.jar"

          mkdir -p ../jar-release-artifacts
          zip -j "../jar-release-artifacts/${ARCHIVE_NAME_PREFIX}.zip" "$JAR_NAME"
          tar -czf "../jar-release-artifacts/${ARCHIVE_NAME_PREFIX}.tar.gz" -C . "$JAR_NAME"

          echo "JAR_ZIP_PATH=../jar-release-artifacts/${ARCHIVE_NAME_PREFIX}.zip" >> "$GITHUB_OUTPUT"
          echo "JAR_TAR_PATH=../jar-release-artifacts/${ARCHIVE_NAME_PREFIX}.tar.gz" >> "$GITHUB_OUTPUT"

      - name: Upload JAR artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mticky-jar-artifacts
          path: jar-release-artifacts/

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build_native, build_jar]
    permissions:
      contents: write

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-binaries

      - name: List downloaded files
        run: ls -R all-binaries

      - id: create_release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            all-binaries/**/*.zip
            all-binaries/**/*.tar.gz
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

