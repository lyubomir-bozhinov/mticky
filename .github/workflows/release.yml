name: Release Binaries & JAR

on:
  push:
    tags:
      - 'v[0-9]+\.[0-9]+\.[0-9]+'

jobs:
  build_native:
    name: Build Native Executable (${{ matrix.target_os }}-${{ matrix.target_arch }})
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false # Allows other platform builds to continue even if one fails.
      matrix:
        include:
          # Linux AMD64 build configuration
          - runs-on: ubuntu-latest
            target_os: linux
            target_arch: amd64
            ext: ""
            archive_format: tar.gz
            java_arch: x64
            graalvm_jdk_url: 'https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-22.3.0/graalvm-ce-java17-linux-amd64-22.3.0.tar.gz'

          # Windows AMD64 build configuration
          - runs-on: windows-latest
            target_os: windows
            target_arch: amd64
            ext: ".exe"
            archive_format: zip
            java_arch: x64
            graalvm_jdk_url: 'https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-22.3.0/graalvm-ce-java17-windows-amd64-22.3.0.zip'

          # macOS AMD64 (Intel) build configuration
          - runs-on: macos-latest
            target_os: darwin
            target_arch: amd64
            ext: ""
            archive_format: tar.gz
            java_arch: x64
            graalvm_jdk_url: 'https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-22.3.0/graalvm-ce-java17-darwin-amd64-22.3.0.tar.gz'

          # macOS ARM64 (Apple Silicon) build configuration
          - runs-on: macos-latest
            target_os: darwin
            target_arch: arm64
            ext: ""
            archive_format: tar.gz
            java_arch: aarch64
            graalvm_jdk_url: 'https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-22.3.0/graalvm-ce-java17-darwin-aarch64-22.3.0.tar.gz'

    steps:
      - uses: actions/checkout@v4

      - name: Install GraalVM manually
        run: |
          INSTALL_DIR="$HOME/graalvm" # Use home directory to avoid permission issues
          
          curl -L -f -o graalvm.tar.gz "${{ matrix.graalvm_jdk_url }}" || { echo "::error::Failed to download GraalVM from URL"; exit 1; }
          mkdir -p "$INSTALL_DIR" || { echo "::error::Failed to create installation directory"; exit 1; }
          tar -xvzf graalvm.tar.gz -C "$INSTALL_DIR" --strip-components=1 || { echo "::error::Failed to extract GraalVM archive"; exit 1; }
          rm graalvm.tar.gz # Clean up downloaded archive

          # Set environment variables for the current shell session
          export JAVA_HOME="$INSTALL_DIR"
          export PATH="$INSTALL_DIR/bin:$PATH" # Prepend to PATH to ensure GraalVM is found first
          
          # Set for subsequent steps in the job
          echo "JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
          echo "PATH=$PATH" >> $GITHUB_ENV

          java -version # Verify Java installation is GraalVM
          
          # Check and install native-image component using GraalVM Updater (gu)
          # First, check if 'gu' itself is available, then attempt to install native-image.
          if command -v gu &> /dev/null; then
              echo "gu command found. Checking for and installing native-image component if necessary..."
              if gu install native-image; then
                  echo "Native-image installation succeeded (or was already present)."
              else
                  echo "::warning::Failed to install native-image via 'gu'. This might indicate a problem."
              fi
          else
              echo "::warning::'gu' command not found. Cannot automatically install native-image. Assuming it's bundled or will fail later."
          fi
          
          native-image --version # Verify native-image tool installation

      - name: Build native image with Maven
        run: mvn -B clean package -Pnative # '-Pnative' activates native image compilation

      - name: Prepare native executable artifact
        id: prepare_native_artifact
        run: |
          VERSION="${GITHUB_REF_NAME}"
          PROJECT_NAME="mticky"
          EXECUTABLE_SOURCE_NAME="$PROJECT_NAME${{ matrix.ext }}"
          EXECUTABLE_PATH="target/$EXECUTABLE_SOURCE_NAME"
          OUTPUT_ARCHIVE_NAME="${PROJECT_NAME}-${VERSION}-${{ matrix.target_os }}-${{ matrix.target_arch }}.${{ matrix.archive_format }}"
          
          mkdir -p native-release-artifacts
          cp "$EXECUTABLE_PATH" "native-release-artifacts/$EXECUTABLE_SOURCE_NAME"

          if [[ "${{ matrix.archive_format }}" == "zip" ]]; then
            zip -j "native-release-artifacts/$OUTPUT_ARCHIVE_NAME" "native-release-artifacts/$EXECUTABLE_SOURCE_NAME" # '-j' flattens directory structure in zip
          else
            tar -czf "native-release-artifacts/$OUTPUT_ARCHIVE_NAME" -C native-release-artifacts "$EXECUTABLE_SOURCE_NAME" # '-C' changes directory for tar
          fi
          
          echo "ARCHIVE_PATH=native-release-artifacts/$OUTPUT_ARCHIVE_NAME" >> "$GITHUB_OUTPUT"
          echo "ARTIFACT_NAME=${PROJECT_NAME}-${{ matrix.target_os }}-${{ matrix.target_arch }}-native-executable" >> "$GITHUB_OUTPUT"

      - name: Upload native executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepare_native_artifact.outputs.ARTIFACT_NAME }}
          path: ${{ steps.prepare_native_artifact.outputs.ARCHIVE_PATH }}

  build_jar:
    name: Build Cross-Platform JAR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Temurin provides a standard OpenJDK for JARs
          java-version: '17'
          cache: 'maven'

      - name: Build with Maven
        run: mvn -B clean package # Builds the standard JAR

      - name: Create JAR distribution archives
        id: create_jar_archives
        run: |
          cd target
          VERSION="${GITHUB_REF_NAME}"
          VERSION_NO_V="${VERSION#v}" # Remove 'v' prefix from version
          ARCHIVE_NAME_PREFIX="mticky-${{ github.ref_name }}"
          JAR_NAME="mticky-${VERSION_NO_V}.jar"
          
          mkdir -p ../jar-release-artifacts
          zip -j "../jar-release-artifacts/${ARCHIVE_NAME_PREFIX}.zip" "$JAR_NAME"
          tar -czf "../jar-release-artifacts/${ARCHIVE_NAME_PREFIX}.tar.gz" -C . "$JAR_NAME"

          echo "JAR_ZIP_PATH=../jar-release-artifacts/${ARCHIVE_NAME_PREFIX}.zip" >> "$GITHUB_OUTPUT"
          echo "JAR_TAR_PATH=../jar-release-artifacts/${ARCHIVE_NAME_PREFIX}.tar.gz" >> "$GITHUB_OUTPUT"

      - name: Upload JAR artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mticky-jar-artifacts
          path: jar-release-artifacts/

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build_native, build_jar] # Ensures native and JAR builds complete first
    permissions:
      contents: write # Required to create a release

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-binaries # Downloads all artifacts into subdirectories

      - name: List downloaded files (for debugging purposes)
        run: ls -R all-binaries

      - id: create_release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            all-binaries/**/*.zip
            all-binaries/**/*.tar.gz
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

